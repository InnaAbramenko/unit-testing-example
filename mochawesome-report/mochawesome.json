{
  "stats": {
    "suites": 4,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2024-01-17T13:06:01.335Z",
    "end": "2024-01-17T13:06:01.350Z",
    "duration": 15,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f910f414-f7fe-4beb-89e4-9150576e19e4",
      "title": "",
      "fullFile": "C:\\Users\\Inna_Abramenko\\Projects1\\unit-testing-example\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
      "file": "\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "71e4ec79-743c-4025-afb7-04cfca822c13",
          "title": "json-schema-traverse",
          "fullFile": "C:\\Users\\Inna_Abramenko\\Projects1\\unit-testing-example\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
          "file": "\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"json-schema-traverse\"",
              "fullTitle": "json-schema-traverse \"before each\" hook in \"json-schema-traverse\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "calls = [];",
              "err": {},
              "uuid": "91101b16-4c32-49bf-ba0d-c12cfc046fcb",
              "parentUUID": "71e4ec79-743c-4025-afb7-04cfca822c13",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should traverse all keywords containing schemas recursively",
              "fullTitle": "json-schema-traverse should traverse all keywords containing schemas recursively",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var schema = require('./fixtures/schema').schema;\nvar expectedCalls = require('./fixtures/schema').expectedCalls;\ntraverse(schema, {cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
              "err": {},
              "uuid": "028ab03a-901f-4cda-86fc-ad14e3a89fe4",
              "parentUUID": "71e4ec79-743c-4025-afb7-04cfca822c13",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "ce335b1c-0503-4563-807b-736e9901a9b9",
              "title": "Legacy v0.3.1 API",
              "fullFile": "C:\\Users\\Inna_Abramenko\\Projects1\\unit-testing-example\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "file": "\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should traverse all keywords containing schemas recursively",
                  "fullTitle": "json-schema-traverse Legacy v0.3.1 API should traverse all keywords containing schemas recursively",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var schema = require('./fixtures/schema').schema;\nvar expectedCalls = require('./fixtures/schema').expectedCalls;\ntraverse(schema, callback);\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "ef865520-218d-47c3-9bea-0db671fd176c",
                  "parentUUID": "ce335b1c-0503-4563-807b-736e9901a9b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work when an options object is provided",
                  "fullTitle": "json-schema-traverse Legacy v0.3.1 API should work when an options object is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar schema = require('./fixtures/schema').schema;\nvar expectedCalls = require('./fixtures/schema').expectedCalls;\ntraverse(schema, {}, callback);\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "af24ce39-858c-42eb-ad6b-79333dc59d9f",
                  "parentUUID": "ce335b1c-0503-4563-807b-736e9901a9b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef865520-218d-47c3-9bea-0db671fd176c",
                "af24ce39-858c-42eb-ad6b-79333dc59d9f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d34e2102-3212-4e83-b23d-051cd17826da",
              "title": "allKeys option",
              "fullFile": "C:\\Users\\Inna_Abramenko\\Projects1\\unit-testing-example\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "file": "\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should traverse objects with allKeys: true option",
                  "fullTitle": "json-schema-traverse allKeys option should traverse objects with allKeys: true option",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar expectedCalls = [\n  [schema, '', schema, undefined, undefined, undefined, undefined],\n  [schema.someObject, '/someObject', schema, '', 'someObject', schema, undefined]\n];\ntraverse(schema, {allKeys: true, cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "024568f3-a25d-46cb-9da9-34dcc5c6ccd3",
                  "parentUUID": "d34e2102-3212-4e83-b23d-051cd17826da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should NOT traverse objects with allKeys: false option",
                  "fullTitle": "json-schema-traverse allKeys option should NOT traverse objects with allKeys: false option",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar expectedCalls = [\n  [schema, '', schema, undefined, undefined, undefined, undefined]\n];\ntraverse(schema, {allKeys: false, cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "39fadc44-faef-4303-9bd4-94636977abb9",
                  "parentUUID": "d34e2102-3212-4e83-b23d-051cd17826da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should NOT traverse objects without allKeys option",
                  "fullTitle": "json-schema-traverse allKeys option should NOT traverse objects without allKeys option",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar expectedCalls = [\n  [schema, '', schema, undefined, undefined, undefined, undefined]\n];\ntraverse(schema, {cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "e60c9942-6361-41ee-96ef-1133cbfd2bfc",
                  "parentUUID": "d34e2102-3212-4e83-b23d-051cd17826da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should NOT travers objects in standard keywords which value is not a schema",
                  "fullTitle": "json-schema-traverse allKeys option should NOT travers objects in standard keywords which value is not a schema",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var schema2 = {\n  const: {foo: 'bar'},\n  enum: ['a', 'b'],\n  required: ['foo'],\n  another: {\n  },\n  patternProperties: {}, // will not traverse - no properties\n  dependencies: true, // will not traverse - invalid\n  properties: {\n    smaller: {\n      type: 'number'\n    },\n    larger: {\n      type: 'number',\n      minimum: {$data: '1/smaller'}\n    }\n  }\n};\n// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar expectedCalls = [\n  [schema2, '', schema2, undefined, undefined, undefined, undefined],\n  [schema2.another, '/another', schema2, '', 'another', schema2, undefined],\n  [schema2.properties.smaller, '/properties/smaller', schema2, '', 'properties', schema2, 'smaller'],\n  [schema2.properties.larger, '/properties/larger', schema2, '', 'properties', schema2, 'larger'],\n];\ntraverse(schema2, {allKeys: true, cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "57e5db04-c2b3-48f7-bd31-7a6efc06de77",
                  "parentUUID": "d34e2102-3212-4e83-b23d-051cd17826da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "024568f3-a25d-46cb-9da9-34dcc5c6ccd3",
                "39fadc44-faef-4303-9bd4-94636977abb9",
                "e60c9942-6361-41ee-96ef-1133cbfd2bfc",
                "57e5db04-c2b3-48f7-bd31-7a6efc06de77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8cff555f-3c55-4a44-af4a-3815238b9c88",
              "title": "pre and post",
              "fullFile": "C:\\Users\\Inna_Abramenko\\Projects1\\unit-testing-example\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "file": "\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should traverse schema in pre-order",
                  "fullTitle": "json-schema-traverse pre and post should traverse schema in pre-order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "traverse(schema, {cb: {pre}});\nvar expectedCalls = [\n  ['pre', schema, '', schema, undefined, undefined, undefined, undefined],\n  ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n  ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n];\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "65208dbc-57c4-4ac4-97da-b5bdee15bf45",
                  "parentUUID": "8cff555f-3c55-4a44-af4a-3815238b9c88",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should traverse schema in post-order",
                  "fullTitle": "json-schema-traverse pre and post should traverse schema in post-order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "traverse(schema, {cb: {post}});\nvar expectedCalls = [\n  ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n  ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n  ['post', schema, '', schema, undefined, undefined, undefined, undefined],\n];\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "129f541a-0fda-4182-bc70-96dec9d06032",
                  "parentUUID": "8cff555f-3c55-4a44-af4a-3815238b9c88",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should traverse schema in pre- and post-order at the same time",
                  "fullTitle": "json-schema-traverse pre and post should traverse schema in pre- and post-order at the same time",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "traverse(schema, {cb: {pre, post}});\nvar expectedCalls = [\n  ['pre', schema, '', schema, undefined, undefined, undefined, undefined],\n  ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n  ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n  ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n  ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n  ['post', schema, '', schema, undefined, undefined, undefined, undefined],\n];\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "2f7a9b4e-ea81-4dd6-b894-435a72670078",
                  "parentUUID": "8cff555f-3c55-4a44-af4a-3815238b9c88",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65208dbc-57c4-4ac4-97da-b5bdee15bf45",
                "129f541a-0fda-4182-bc70-96dec9d06032",
                "2f7a9b4e-ea81-4dd6-b894-435a72670078"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "028ab03a-901f-4cda-86fc-ad14e3a89fe4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}